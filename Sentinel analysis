{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1DaH4vTdZby03VlDkuN9wbsgW3bQjIvHX",
      "authorship_tag": "ABX9TyMua5pJtrXRHGO87MLn90Hj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/genc-v/out-tasks/blob/main/Sentinel%20analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Importing and reading the file**\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ja5KQDkODufw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K9tS5cpDEHrU",
        "outputId": "a306fffc-feb4-45f8-fdda-324e56a14767",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "import string\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.lancaster import LancasterStemmer\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "from decimal import Decimal\n",
        "from sklearn.model_selection import train_test_split\n",
        "from nltk.tokenize import word_tokenize\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "import math\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# download necessary NLTK corpora and packages\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "\n",
        "# getting the data\n",
        "df = pd.read_csv(\"/content/training.csv\", encoding=\"ISO-8859-1\")\n",
        "\n",
        "stemmer = LancasterStemmer()\n",
        "vectorizer = CountVectorizer()\n",
        "\n",
        "texts = []\n",
        "labels = []\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **(Experiment 1) Test sizes**"
      ],
      "metadata": {
        "id": "dbTXG2BZDoJA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# preprocess each text and its corresponding label\n",
        "for index, row in df.iterrows():\n",
        "    text = row[\"text\"]\n",
        "    label = row[\"sentiment\"]\n",
        "    \n",
        "    \n",
        "    text = re.sub(r\"http\\S+|@\\S+\", \"\", text)\n",
        "    \n",
        "    # tokenize \n",
        "    tokens = nltk.word_tokenize(text)\n",
        "    \n",
        "    # remove the non needed text\n",
        "    tokens = [token for token in tokens if token.isalpha()]\n",
        "    stemmed_tokens = [stemmer.stem(word.lower()) for word in tokens if word.lower() not in stopwords.words('english')]\n",
        "    \n",
        "    # join to form a preprocessed text\n",
        "    preprocessed_text = \" \".join(stemmed_tokens)\n",
        "    \n",
        "    #the preprocessed text to the lists\n",
        "    texts.append(preprocessed_text)\n",
        "    labels.append(label)\n",
        "\n",
        "# split the dataset into training and testing sets\n",
        "train_size = 0.6\n",
        "test_size = 1 - train_size\n",
        "X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=test_size, random_state=42)\n",
        "\n",
        "# create lists to store the accuracies and sizes of the training set\n",
        "accuracies = []\n",
        "train_sizes = []\n",
        "\n",
        "# perform Experiment \n",
        "for i in range(1, 10):\n",
        "\n",
        "    # set the size of the training set\n",
        "    train_size = i * 0.1\n",
        "  \n",
        "    # split the dataset into training and testing sets\n",
        "    test_size = 1 - train_size\n",
        "    X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=test_size, random_state=42)\n",
        "    \n",
        "    # vectorize the training set\n",
        "    X_train_vectorized = vectorizer.fit_transform(X_train)\n",
        "    \n",
        "    # train a Naive Bayes classifier on the training set\n",
        "    nb_classifier = MultinomialNB()\n",
        "    nb_classifier.fit(X_train_vectorized, y_train)\n",
        "    \n",
        "    # vectorize the testing set\n",
        "    X_test_vectorized = vectorizer.transform(X_test)\n",
        "    \n",
        "    # make predictions on the testing set\n",
        "    y_pred = nb_classifier.predict(X_test_vectorized)\n",
        "    \n",
        "    # calculate the accuracy of the classifier and add it to the list\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracies.append(accuracy)\n",
        "    \n",
        "    # add the size of the training set to the list\n",
        "    train_sizes.append(train_size)\n",
        "\n",
        "# putting the data into a graph\n",
        "plt.plot(train_sizes, accuracies)\n",
        "plt.xlabel(\"Size of Training Set\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Experiment 1: Changing the Size of the Training Set\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "8bjhWe6bDuUP",
        "outputId": "2a93bdc9-27bd-4a03-9c4f-2feb979e940f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **(Experiment 2) Frequency of words**"
      ],
      "metadata": {
        "id": "6u3sliLCDfnn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the minimum frequency of words\n",
        "min_freqs = [1, 2, 5, 10, 20]\n",
        "\n",
        "# Define a list to store the accuracy scores for each minimum frequency\n",
        "accuracy_scores = []\n",
        "\n",
        "# Loop through each minimum frequency\n",
        "for min_freq in min_freqs:\n",
        "\n",
        "    # Preprocess the texts\n",
        "    texts = []\n",
        "    labels = []\n",
        "    for i in range(len(df)):\n",
        "        text = df.loc[i, \"text\"]\n",
        "        label = df.loc[i, \"sentiment\"]\n",
        "        # remove URLs, user mentions, and special characters\n",
        "        text = re.sub(r\"http\\S+|www\\S+|\\@\\w+|\\d+|[^\\w\\s]\", \"\", text)\n",
        "        # tokenize the text\n",
        "        tokens = nltk.word_tokenize(text)\n",
        "        # remove stop words and stem the remaining words\n",
        "        stemmed_tokens = [stemmer.stem(word.lower()) for word in tokens if word.lower() not in stop_words]\n",
        "        # join the stemmed tokens to form a preprocessed text\n",
        "        preprocessed_text = \" \".join(stemmed_tokens)\n",
        "        texts.append(preprocessed_text)\n",
        "        labels.append(label)\n",
        "\n",
        "    # Vectorize the texts\n",
        "    vectorizer = CountVectorizer(min_df=min_freq)\n",
        "    X = vectorizer.fit_transform(texts)\n",
        "    y = np.array(labels)\n",
        "\n",
        "    # Split the dataset into training and testing sets\n",
        "    train_size = 0.8\n",
        "    test_size = 1 - train_size\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n",
        "\n",
        "    # Train the Naive Bayes classifier\n",
        "    clf = MultinomialNB()\n",
        "    clf.fit(X_train, y_train)\n",
        "\n",
        "    # Test the classifier on the testing set and calculate the accuracy score\n",
        "    accuracy = clf.score(X_test, y_test)\n",
        "    accuracy_scores.append(accuracy)\n",
        "\n",
        "# Plot the accuracy scores for each minimum frequency\n",
        "plt.plot(min_freqs, accuracy_scores)\n",
        "plt.xlabel('Minimum Frequency')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Experiment 2: Accuracy vs Minimum Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "EIsFDLNOKmV9",
        "outputId": "a43f2905-78a8-4e54-fbdf-fdcd54f49b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **(Experiment 3) Estimators**"
      ],
      "metadata": {
        "id": "XXJ73YFwDWVZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # remove punctuation and convert to lowercase\n",
        "    text = text.translate(str.maketrans('', '', string.punctuation)).lower()\n",
        "    # tokenize the text\n",
        "    words = word_tokenize(text)\n",
        "    # remove stop words\n",
        "    words = [word for word in words if word not in stop_words]\n",
        "    # stem the words\n",
        "    words = [stemmer.stem(word) for word in words]\n",
        "    # combine the words back into a string\n",
        "    text = ' '.join(words)\n",
        "    return text\n",
        "\n",
        "df['text'] = df['text'].apply(preprocess_text)\n",
        "\n",
        "# split the data into training and testing sets\n",
        "train_size = 0.8\n",
        "test_size = 1 - train_size\n",
        "X_train, X_test, y_train, y_test = train_test_split(df['text'], df['sentiment'], test_size=test_size, random_state=42)\n",
        "\n",
        "# vectorize the data\n",
        "vectorizer = CountVectorizer()\n",
        "X_train_vec = vectorizer.fit_transform(X_train)\n",
        "X_test_vec = vectorizer.transform(X_test)\n",
        "\n",
        "# Experiment: Changing the number of estimators for Random Forest classifier\n",
        "\n",
        "estimators = [10, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]\n",
        "accuracies = []\n",
        "\n",
        "for n in estimators:\n",
        "    # train the model\n",
        "    model = RandomForestClassifier(n_estimators=n, random_state=42)\n",
        "    model.fit(X_train_vec, y_train)\n",
        "\n",
        "    # make predictions on the test set\n",
        "    y_pred = model.predict(X_test_vec)\n",
        "\n",
        "    # calculate the accuracy of the model\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracies.append(accuracy)\n",
        "\n",
        "# plot the results\n",
        "plt.plot(estimators, accuracies)\n",
        "plt.title('Experiment 3: Accuracy vs. Number of Estimators')\n",
        "plt.xlabel('Number of Estimators')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "dXdXUAYQNeCT",
        "outputId": "f9f65393-9634-4111-c213-adea0ee0547f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **(Experiment 4) Kernel functions**"
      ],
      "metadata": {
        "id": "KBbTZxb_DHOi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# remove URLs, RTs, and twitter handles\n",
        "df['text'] = df['text'].apply(lambda x: re.sub(r\"http\\S+\", \"\", x))\n",
        "df['text'] = df['text'].apply(lambda x: re.sub(r\"RT \", \"\", x))\n",
        "df['text'] = df['text'].apply(lambda x: re.sub(r\"@\\S+\", \"\", x))\n",
        "\n",
        "# remove punctuation and convert to lowercase\n",
        "translator = str.maketrans('', '', string.punctuation)\n",
        "df['text'] = df['text'].apply(lambda x: x.translate(translator).lower())\n",
        "\n",
        "# tokenize the text\n",
        "df['text'] = df['text'].apply(lambda x: nltk.word_tokenize(x))\n",
        "\n",
        "# remove stop words and apply stemming\n",
        "stop_words = set(stopwords.words('english'))\n",
        "stemmer = LancasterStemmer()\n",
        "df['text'] = df['text'].apply(lambda x: [stemmer.stem(word) for word in x if word not in stop_words])\n",
        "\n",
        "# join the tokens back into a string\n",
        "df['text'] = df['text'].apply(lambda x: ' '.join(x))\n",
        "\n",
        "# split the df into features and labels\n",
        "texts = df['text']\n",
        "labels = df['sentiment']\n",
        "\n",
        "# vectorize the features\n",
        "vectorizer = CountVectorizer()\n",
        "X = vectorizer.fit_transform(texts)\n",
        "\n",
        "# split the data into training and testing sets\n",
        "train_size = 0.8\n",
        "test_size = 1 - train_size\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=test_size, random_state=42)\n",
        "\n",
        "# perform SVM classification using different kernel functions\n",
        "kernels = ['linear', 'poly', 'rbf', 'sigmoid']\n",
        "accuracies = []\n",
        "\n",
        "for kernel in kernels:\n",
        "    clf = SVC(kernel=kernel)\n",
        "    clf.fit(X_train, y_train)\n",
        "    y_pred = clf.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracies.append(accuracy)\n",
        "\n",
        "# plot the results\n",
        "plt.plot(kernels, accuracies)\n",
        "plt.title('Experiment 4: SVM Classifier with Different Kernel Functions')\n",
        "plt.xlabel('Kernel Function')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "D1Qudq44OT-T",
        "outputId": "b2214a01-056d-4422-ac23-917883f93e0a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Training the data and labeling it into data.csv**"
      ],
      "metadata": {
        "id": "hXIQKcn1C-hK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import string\n",
        "from decimal import Decimal\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "import math\n",
        "from nltk.stem.lancaster import LancasterStemmer\n",
        "\n",
        "# Load the training data\n",
        "train_data = pd.read_csv('/content/training.csv')\n",
        "\n",
        "# Clean and preprocess the training data\n",
        "def preprocess_text(text):\n",
        "    text = text.lower()\n",
        "    text = re.sub('\\[.*?\\]', '', text)\n",
        "    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n",
        "    text = re.sub('\\w*\\d\\w*', '', text)\n",
        "    text = ' '.join([word for word in text.split() if word not in stop_words])\n",
        "    stemmer = LancasterStemmer()\n",
        "    text = ' '.join([stemmer.stem(word) for word in text.split()])\n",
        "    return text\n",
        "\n",
        "train_data['text'] = train_data['text'].apply(preprocess_text)\n",
        "\n",
        "# Split the training data into features and labels\n",
        "X_train = train_data['text']\n",
        "y_train = train_data['sentiment']\n",
        "\n",
        "# Load the unlabeled data\n",
        "unlabeled_data = pd.read_csv('/content/data.csv')\n",
        "\n",
        "# Clean and preprocess the unlabeled data\n",
        "unlabeled_data['text'] = unlabeled_data['text'].apply(preprocess_text)\n",
        "\n",
        "# Load the Random Forest classifier and train it on the training data\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "vectorizer = TfidfVectorizer(max_features=1000)\n",
        "X_train = vectorizer.fit_transform(X_train)\n",
        "X_unlabeled = vectorizer.transform(unlabeled_data['text'])\n",
        "\n",
        "rfc = RandomForestClassifier(n_estimators=100)\n",
        "rfc.fit(X_train, y_train)\n",
        "\n",
        "# Predict the labels for the unlabeled data\n",
        "labeled_data = pd.DataFrame(columns=['text', 'sentiment'])\n",
        "for i, row in unlabeled_data.iterrows():\n",
        "    text = row['text']\n",
        "    X_test = X_unlabeled[i]\n",
        "    predicted_label = rfc.predict(X_test)\n",
        "    labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
        "\n",
        "# Save the labeled data to a new file\n",
        "labeled_data.to_csv('labeled_data.csv', index=False)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9u2rJXTU3xB",
        "outputId": "cd3db012-4772-47b5-ded7-e6f8096057b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n",
            "<ipython-input-22-780b7b3b1b0a>:55: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  labeled_data = labeled_data.append({'text': text, 'sentiment': predicted_label[0]}, ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **The standart basic test**"
      ],
      "metadata": {
        "id": "WuaIEP32C4Nc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import string\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from decimal import Decimal\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.lancaster import LancasterStemmer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# load stop words\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# initialize stemmer\n",
        "stemmer = LancasterStemmer()\n",
        "\n",
        "# load training data\n",
        "train_data = pd.read_csv('/content/training.csv')\n",
        "\n",
        "# preprocess the training data\n",
        "def preprocess(text):\n",
        "    # convert to lowercase\n",
        "    text = text.lower()\n",
        "    \n",
        "    # remove punctuation\n",
        "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
        "    \n",
        "    # remove numbers\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    \n",
        "    # tokenize the text\n",
        "    tokens = text.split()\n",
        "    \n",
        "    # remove stop words and stem tokens\n",
        "    tokens = [stemmer.stem(token) for token in tokens if token not in stop_words]\n",
        "    \n",
        "    # reassemble the text\n",
        "    text = ' '.join(tokens)\n",
        "    \n",
        "    return text\n",
        "\n",
        "# preprocess the training data\n",
        "train_data['text'] = train_data['text'].apply(preprocess)\n",
        "\n",
        "# vectorize the training data\n",
        "vectorizer = TfidfVectorizer()\n",
        "X_train = vectorizer.fit_transform(train_data['text'])\n",
        "y_train = train_data['sentiment']\n",
        "\n",
        "# train the model\n",
        "model = MultinomialNB()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# predict the training data\n",
        "y_pred = model.predict(X_train)\n",
        "\n",
        "# calculate the accuracy\n",
        "accuracy = accuracy_score(y_train, y_pred)\n",
        "\n",
        "# print the accuracy\n",
        "print('Accuracy:', accuracy)\n"
      ],
      "metadata": {
        "id": "7xKoqLzOsP44",
        "outputId": "ee960b2d-b9b0-421d-fa74-1e7079a9d3d3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8019704433497536\n"
          ]
        }
      ]
    }
  ]
}